#!/bin/bash
# Enhanced ed wrapper for Claude Code
# Usage: eed [--debug] <file> <ed_commands...>
#
# Options:
#   --debug    Enable debug mode (preserve temp files, show ed output)
#
# Examples:
#   eed file.txt "5d"                           # Delete line 5
#   eed file.txt "3c" "new content" "."         # Replace line 3
#   eed file.txt "5a" "new line" "."            # Insert after line 5
#   eed file.txt "1,3d"                         # Delete lines 1-3
#   eed file.txt "s/old/new/g"                  # Replace all 'old' with 'new' on current line
#   eed file.txt "1,\$s/old/new/g"              # Replace all 'old' with 'new' in entire file

set -e

# Debug mode flag
DEBUG_MODE=false

show_usage() {
    echo "Usage: eed [--debug] <file> <ed_commands...>"
    echo ""
    echo "Options:"
    echo "  --debug    Enable debug mode (preserve temp files, verbose errors)"
    echo ""
    echo "Common ed commands:"
    echo "  Nd             - Delete line N"
    echo "  N,Md           - Delete lines N through M"
    echo "  Nc <text> .    - Replace line N with <text>"
    echo "  Na <text> .    - Insert <text> after line N"
    echo "  Ni <text> .    - Insert <text> before line N"
    echo "  s/old/new/     - Replace first 'old' with 'new' on current line"
    echo "  s/old/new/g    - Replace all 'old' with 'new' on current line"
    echo "  1,\$s/old/new/g - Replace all 'old' with 'new' in entire file"
    echo ""
    echo "Examples:"
    echo "  eed file.txt '5d'                           # Delete line 5"
    echo "  eed file.txt '3c' 'new content' '.'         # Replace line 3"
    echo "  eed file.txt '5a' 'new line' '.'            # Insert after line 5"
    echo "  eed file.txt '1,3d'                         # Delete lines 1-3"
}

# Parse debug flag
if [ "$1" = "--debug" ]; then
    DEBUG_MODE=true
    shift
fi

if [ $# -lt 2 ]; then
    show_usage
    exit 1
fi

FILE="$1"
shift

# Check if file exists, create if needed
if [ ! -f "$FILE" ]; then
    echo "Creating new file: $FILE"
    touch "$FILE"
fi

# Create backup
cp "$FILE" "$FILE.eed.bak"

# Create secure temporary command file
TEMP_CMD_FILE=$(mktemp)

# Cleanup function to ensure temp file is removed
cleanup() {
    if [ "$DEBUG_MODE" = false ]; then
        rm -f "$TEMP_CMD_FILE"
    else
        echo "Debug mode: temporary file preserved at $TEMP_CMD_FILE" >&2
    fi
}
trap cleanup EXIT

# Write each command to temp file (one per line)
for cmd in "$@"; do
    printf '%s\n' "$cmd" >> "$TEMP_CMD_FILE"
done

# Always add write and quit
printf 'w\nq\n' >> "$TEMP_CMD_FILE"

# Execute ed with error handling
if [ "$DEBUG_MODE" = true ]; then
    # Debug mode: show ed output
    echo "Debug mode: executing ed with commands from $TEMP_CMD_FILE" >&2
    echo "Debug mode: ed command file contents:" >&2
    cat -n "$TEMP_CMD_FILE" >&2
    echo "Debug mode: ed output:" >&2
    ed -s "$FILE" < "$TEMP_CMD_FILE"
    ED_EXIT_CODE=$?
else
    # Normal mode: silent execution
    ed -s "$FILE" < "$TEMP_CMD_FILE" >/dev/null 2>&1
    ED_EXIT_CODE=$?
fi

if [ $ED_EXIT_CODE -eq 0 ]; then
    echo "✓ Successfully edited $FILE"
    # Remove backup on success (temp file cleaned by trap)
    rm -f "$FILE.eed.bak"
else
    echo "✗ Error: ed command failed, restoring backup" >&2
    mv "$FILE.eed.bak" "$FILE"
    echo "Commands attempted:" >&2
    head -n -2 "$TEMP_CMD_FILE" >&2  # Show commands without w/q
    exit 1
fi
